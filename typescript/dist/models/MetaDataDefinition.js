"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaDataDefinitionToJSON = exports.MetaDataDefinitionFromJSONTyped = exports.MetaDataDefinitionFromJSON = void 0;
const MetaDataDefinitionGdalMetaDataList_1 = require("./MetaDataDefinitionGdalMetaDataList");
const MetaDataDefinitionGdalMetaDataRegular_1 = require("./MetaDataDefinitionGdalMetaDataRegular");
const MetaDataDefinitionGdalMetadataNetCdfCf_1 = require("./MetaDataDefinitionGdalMetadataNetCdfCf");
const MetaDataDefinitionGdalStatic_1 = require("./MetaDataDefinitionGdalStatic");
const MetaDataDefinitionMockMetaData_1 = require("./MetaDataDefinitionMockMetaData");
const MetaDataDefinitionOgrMetaData_1 = require("./MetaDataDefinitionOgrMetaData");
function MetaDataDefinitionFromJSON(json) {
    return MetaDataDefinitionFromJSONTyped(json, false);
}
exports.MetaDataDefinitionFromJSON = MetaDataDefinitionFromJSON;
function MetaDataDefinitionFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'GdalMetaDataList':
            return Object.assign({}, (0, MetaDataDefinitionGdalMetaDataList_1.MetaDataDefinitionGdalMetaDataListFromJSONTyped)(json, true), { type: 'GdalMetaDataList' });
        case 'GdalMetaDataRegular':
            return Object.assign({}, (0, MetaDataDefinitionGdalMetaDataRegular_1.MetaDataDefinitionGdalMetaDataRegularFromJSONTyped)(json, true), { type: 'GdalMetaDataRegular' });
        case 'GdalMetadataNetCdfCf':
            return Object.assign({}, (0, MetaDataDefinitionGdalMetadataNetCdfCf_1.MetaDataDefinitionGdalMetadataNetCdfCfFromJSONTyped)(json, true), { type: 'GdalMetadataNetCdfCf' });
        case 'GdalStatic':
            return Object.assign({}, (0, MetaDataDefinitionGdalStatic_1.MetaDataDefinitionGdalStaticFromJSONTyped)(json, true), { type: 'GdalStatic' });
        case 'MockMetaData':
            return Object.assign({}, (0, MetaDataDefinitionMockMetaData_1.MetaDataDefinitionMockMetaDataFromJSONTyped)(json, true), { type: 'MockMetaData' });
        case 'OgrMetaData':
            return Object.assign({}, (0, MetaDataDefinitionOgrMetaData_1.MetaDataDefinitionOgrMetaDataFromJSONTyped)(json, true), { type: 'OgrMetaData' });
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${json['type']}'`);
    }
}
exports.MetaDataDefinitionFromJSONTyped = MetaDataDefinitionFromJSONTyped;
function MetaDataDefinitionToJSON(value) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'GdalMetaDataList':
            return (0, MetaDataDefinitionGdalMetaDataList_1.MetaDataDefinitionGdalMetaDataListToJSON)(value);
        case 'GdalMetaDataRegular':
            return (0, MetaDataDefinitionGdalMetaDataRegular_1.MetaDataDefinitionGdalMetaDataRegularToJSON)(value);
        case 'GdalMetadataNetCdfCf':
            return (0, MetaDataDefinitionGdalMetadataNetCdfCf_1.MetaDataDefinitionGdalMetadataNetCdfCfToJSON)(value);
        case 'GdalStatic':
            return (0, MetaDataDefinitionGdalStatic_1.MetaDataDefinitionGdalStaticToJSON)(value);
        case 'MockMetaData':
            return (0, MetaDataDefinitionMockMetaData_1.MetaDataDefinitionMockMetaDataToJSON)(value);
        case 'OgrMetaData':
            return (0, MetaDataDefinitionOgrMetaData_1.MetaDataDefinitionOgrMetaDataToJSON)(value);
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${value['type']}'`);
    }
}
exports.MetaDataDefinitionToJSON = MetaDataDefinitionToJSON;
