"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SymbologyToJSON = exports.SymbologyFromJSONTyped = exports.SymbologyFromJSON = void 0;
const SymbologyLine_1 = require("./SymbologyLine");
const SymbologyPoint_1 = require("./SymbologyPoint");
const SymbologyPolygon_1 = require("./SymbologyPolygon");
const SymbologyRaster_1 = require("./SymbologyRaster");
function SymbologyFromJSON(json) {
    return SymbologyFromJSONTyped(json, false);
}
exports.SymbologyFromJSON = SymbologyFromJSON;
function SymbologyFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'line':
            return Object.assign({}, (0, SymbologyLine_1.SymbologyLineFromJSONTyped)(json, true), { type: 'line' });
        case 'point':
            return Object.assign({}, (0, SymbologyPoint_1.SymbologyPointFromJSONTyped)(json, true), { type: 'point' });
        case 'polygon':
            return Object.assign({}, (0, SymbologyPolygon_1.SymbologyPolygonFromJSONTyped)(json, true), { type: 'polygon' });
        case 'raster':
            return Object.assign({}, (0, SymbologyRaster_1.SymbologyRasterFromJSONTyped)(json, true), { type: 'raster' });
        default:
            throw new Error(`No variant of Symbology exists with 'type=${json['type']}'`);
    }
}
exports.SymbologyFromJSONTyped = SymbologyFromJSONTyped;
function SymbologyToJSON(value) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'line':
            return (0, SymbologyLine_1.SymbologyLineToJSON)(value);
        case 'point':
            return (0, SymbologyPoint_1.SymbologyPointToJSON)(value);
        case 'polygon':
            return (0, SymbologyPolygon_1.SymbologyPolygonToJSON)(value);
        case 'raster':
            return (0, SymbologyRaster_1.SymbologyRasterToJSON)(value);
        default:
            throw new Error(`No variant of Symbology exists with 'type=${value['type']}'`);
    }
}
exports.SymbologyToJSON = SymbologyToJSON;
