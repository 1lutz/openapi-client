"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaDataDefinitionMockMetaDataToJSON = exports.MetaDataDefinitionMockMetaDataFromJSONTyped = exports.MetaDataDefinitionMockMetaDataFromJSON = exports.instanceOfMetaDataDefinitionMockMetaData = exports.MetaDataDefinitionMockMetaDataTypeEnum = void 0;
const MockDatasetDataSourceLoadingInfo_1 = require("./MockDatasetDataSourceLoadingInfo");
const VectorResultDescriptor_1 = require("./VectorResultDescriptor");
/**
 * @export
 */
exports.MetaDataDefinitionMockMetaDataTypeEnum = {
    MockMetaData: 'MockMetaData'
};
/**
 * Check if a given object implements the MetaDataDefinitionMockMetaData interface.
 */
function instanceOfMetaDataDefinitionMockMetaData(value) {
    if (!('loadingInfo' in value))
        return false;
    if (!('resultDescriptor' in value))
        return false;
    if (!('type' in value))
        return false;
    return true;
}
exports.instanceOfMetaDataDefinitionMockMetaData = instanceOfMetaDataDefinitionMockMetaData;
function MetaDataDefinitionMockMetaDataFromJSON(json) {
    return MetaDataDefinitionMockMetaDataFromJSONTyped(json, false);
}
exports.MetaDataDefinitionMockMetaDataFromJSON = MetaDataDefinitionMockMetaDataFromJSON;
function MetaDataDefinitionMockMetaDataFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'loadingInfo': (0, MockDatasetDataSourceLoadingInfo_1.MockDatasetDataSourceLoadingInfoFromJSON)(json['loadingInfo']),
        'resultDescriptor': (0, VectorResultDescriptor_1.VectorResultDescriptorFromJSON)(json['resultDescriptor']),
        'type': json['type'],
    };
}
exports.MetaDataDefinitionMockMetaDataFromJSONTyped = MetaDataDefinitionMockMetaDataFromJSONTyped;
function MetaDataDefinitionMockMetaDataToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'loadingInfo': (0, MockDatasetDataSourceLoadingInfo_1.MockDatasetDataSourceLoadingInfoToJSON)(value['loadingInfo']),
        'resultDescriptor': (0, VectorResultDescriptor_1.VectorResultDescriptorToJSON)(value['resultDescriptor']),
        'type': value['type'],
    };
}
exports.MetaDataDefinitionMockMetaDataToJSON = MetaDataDefinitionMockMetaDataToJSON;
