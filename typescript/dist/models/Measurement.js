"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeasurementToJSON = exports.MeasurementFromJSONTyped = exports.MeasurementFromJSON = void 0;
const MeasurementClassification_1 = require("./MeasurementClassification");
const MeasurementContinuous_1 = require("./MeasurementContinuous");
const MeasurementUnitless_1 = require("./MeasurementUnitless");
function MeasurementFromJSON(json) {
    return MeasurementFromJSONTyped(json, false);
}
exports.MeasurementFromJSON = MeasurementFromJSON;
function MeasurementFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'classification':
            return Object.assign({}, (0, MeasurementClassification_1.MeasurementClassificationFromJSONTyped)(json, true), { type: 'classification' });
        case 'continuous':
            return Object.assign({}, (0, MeasurementContinuous_1.MeasurementContinuousFromJSONTyped)(json, true), { type: 'continuous' });
        case 'unitless':
            return Object.assign({}, (0, MeasurementUnitless_1.MeasurementUnitlessFromJSONTyped)(json, true), { type: 'unitless' });
        default:
            throw new Error(`No variant of Measurement exists with 'type=${json['type']}'`);
    }
}
exports.MeasurementFromJSONTyped = MeasurementFromJSONTyped;
function MeasurementToJSON(value) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'classification':
            return (0, MeasurementClassification_1.MeasurementClassificationToJSON)(value);
        case 'continuous':
            return (0, MeasurementContinuous_1.MeasurementContinuousToJSON)(value);
        case 'unitless':
            return (0, MeasurementUnitless_1.MeasurementUnitlessToJSON)(value);
        default:
            throw new Error(`No variant of Measurement exists with 'type=${value['type']}'`);
    }
}
exports.MeasurementToJSON = MeasurementToJSON;
