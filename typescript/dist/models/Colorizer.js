"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorizerToJSON = exports.ColorizerFromJSONTyped = exports.ColorizerFromJSON = void 0;
const ColorizerLinearGradient_1 = require("./ColorizerLinearGradient");
const ColorizerLogarithmicGradient_1 = require("./ColorizerLogarithmicGradient");
const ColorizerPalette_1 = require("./ColorizerPalette");
const ColorizerRgba_1 = require("./ColorizerRgba");
function ColorizerFromJSON(json) {
    return ColorizerFromJSONTyped(json, false);
}
exports.ColorizerFromJSON = ColorizerFromJSON;
function ColorizerFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'linearGradient':
            return Object.assign(Object.assign({}, (0, ColorizerLinearGradient_1.ColorizerLinearGradientFromJSONTyped)(json, true)), { type: 'linearGradient' });
        case 'logarithmicGradient':
            return Object.assign(Object.assign({}, (0, ColorizerLogarithmicGradient_1.ColorizerLogarithmicGradientFromJSONTyped)(json, true)), { type: 'logarithmicGradient' });
        case 'palette':
            return Object.assign(Object.assign({}, (0, ColorizerPalette_1.ColorizerPaletteFromJSONTyped)(json, true)), { type: 'palette' });
        case 'rgba':
            return Object.assign(Object.assign({}, (0, ColorizerRgba_1.ColorizerRgbaFromJSONTyped)(json, true)), { type: 'rgba' });
        default:
            throw new Error(`No variant of Colorizer exists with 'type=${json['type']}'`);
    }
}
exports.ColorizerFromJSONTyped = ColorizerFromJSONTyped;
function ColorizerToJSON(value) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'linearGradient':
            return (0, ColorizerLinearGradient_1.ColorizerLinearGradientToJSON)(value);
        case 'logarithmicGradient':
            return (0, ColorizerLogarithmicGradient_1.ColorizerLogarithmicGradientToJSON)(value);
        case 'palette':
            return (0, ColorizerPalette_1.ColorizerPaletteToJSON)(value);
        case 'rgba':
            return (0, ColorizerRgba_1.ColorizerRgbaToJSON)(value);
        default:
            throw new Error(`No variant of Colorizer exists with 'type=${value['type']}'`);
    }
}
exports.ColorizerToJSON = ColorizerToJSON;
