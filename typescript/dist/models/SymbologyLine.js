"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SymbologyLineToJSON = exports.SymbologyLineFromJSONTyped = exports.SymbologyLineFromJSON = exports.instanceOfSymbologyLine = exports.SymbologyLineTypeEnum = void 0;
const StrokeParam_1 = require("./StrokeParam");
const TextSymbology_1 = require("./TextSymbology");
/**
 * @export
 */
exports.SymbologyLineTypeEnum = {
    Line: 'line'
};
/**
 * Check if a given object implements the SymbologyLine interface.
 */
function instanceOfSymbologyLine(value) {
    if (!('autoSimplified' in value))
        return false;
    if (!('stroke' in value))
        return false;
    if (!('type' in value))
        return false;
    return true;
}
exports.instanceOfSymbologyLine = instanceOfSymbologyLine;
function SymbologyLineFromJSON(json) {
    return SymbologyLineFromJSONTyped(json, false);
}
exports.SymbologyLineFromJSON = SymbologyLineFromJSON;
function SymbologyLineFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'autoSimplified': json['autoSimplified'],
        'stroke': (0, StrokeParam_1.StrokeParamFromJSON)(json['stroke']),
        'text': json['text'] == null ? undefined : (0, TextSymbology_1.TextSymbologyFromJSON)(json['text']),
        'type': json['type'],
    };
}
exports.SymbologyLineFromJSONTyped = SymbologyLineFromJSONTyped;
function SymbologyLineToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'autoSimplified': value['autoSimplified'],
        'stroke': (0, StrokeParam_1.StrokeParamToJSON)(value['stroke']),
        'text': (0, TextSymbology_1.TextSymbologyToJSON)(value['text']),
        'type': value['type'],
    };
}
exports.SymbologyLineToJSON = SymbologyLineToJSON;
