"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedRasterResultDescriptorToJSON = exports.TypedRasterResultDescriptorFromJSONTyped = exports.TypedRasterResultDescriptorFromJSON = exports.instanceOfTypedRasterResultDescriptor = exports.TypedRasterResultDescriptorTypeEnum = void 0;
const RasterBandDescriptor_1 = require("./RasterBandDescriptor");
const RasterDataType_1 = require("./RasterDataType");
const SpatialPartition2D_1 = require("./SpatialPartition2D");
const SpatialResolution_1 = require("./SpatialResolution");
const TimeInterval_1 = require("./TimeInterval");
/**
 * @export
 */
exports.TypedRasterResultDescriptorTypeEnum = {
    Raster: 'raster'
};
/**
 * Check if a given object implements the TypedRasterResultDescriptor interface.
 */
function instanceOfTypedRasterResultDescriptor(value) {
    if (!('bands' in value))
        return false;
    if (!('dataType' in value))
        return false;
    if (!('spatialReference' in value))
        return false;
    if (!('type' in value))
        return false;
    return true;
}
exports.instanceOfTypedRasterResultDescriptor = instanceOfTypedRasterResultDescriptor;
function TypedRasterResultDescriptorFromJSON(json) {
    return TypedRasterResultDescriptorFromJSONTyped(json, false);
}
exports.TypedRasterResultDescriptorFromJSON = TypedRasterResultDescriptorFromJSON;
function TypedRasterResultDescriptorFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'bands': (json['bands'].map(RasterBandDescriptor_1.RasterBandDescriptorFromJSON)),
        'bbox': json['bbox'] == null ? undefined : (0, SpatialPartition2D_1.SpatialPartition2DFromJSON)(json['bbox']),
        'dataType': (0, RasterDataType_1.RasterDataTypeFromJSON)(json['dataType']),
        'resolution': json['resolution'] == null ? undefined : (0, SpatialResolution_1.SpatialResolutionFromJSON)(json['resolution']),
        'spatialReference': json['spatialReference'],
        'time': json['time'] == null ? undefined : (0, TimeInterval_1.TimeIntervalFromJSON)(json['time']),
        'type': json['type'],
    };
}
exports.TypedRasterResultDescriptorFromJSONTyped = TypedRasterResultDescriptorFromJSONTyped;
function TypedRasterResultDescriptorToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'bands': (value['bands'].map(RasterBandDescriptor_1.RasterBandDescriptorToJSON)),
        'bbox': (0, SpatialPartition2D_1.SpatialPartition2DToJSON)(value['bbox']),
        'dataType': (0, RasterDataType_1.RasterDataTypeToJSON)(value['dataType']),
        'resolution': (0, SpatialResolution_1.SpatialResolutionToJSON)(value['resolution']),
        'spatialReference': value['spatialReference'],
        'time': (0, TimeInterval_1.TimeIntervalToJSON)(value['time']),
        'type': value['type'],
    };
}
exports.TypedRasterResultDescriptorToJSON = TypedRasterResultDescriptorToJSON;
