/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { MetaDataDefinitionGdalMetaDataListFromJSONTyped, MetaDataDefinitionGdalMetaDataListToJSON, } from './MetaDataDefinitionGdalMetaDataList';
import { MetaDataDefinitionGdalMetaDataRegularFromJSONTyped, MetaDataDefinitionGdalMetaDataRegularToJSON, } from './MetaDataDefinitionGdalMetaDataRegular';
import { MetaDataDefinitionGdalMetadataNetCdfCfFromJSONTyped, MetaDataDefinitionGdalMetadataNetCdfCfToJSON, } from './MetaDataDefinitionGdalMetadataNetCdfCf';
import { MetaDataDefinitionGdalStaticFromJSONTyped, MetaDataDefinitionGdalStaticToJSON, } from './MetaDataDefinitionGdalStatic';
import { MetaDataDefinitionMockMetaDataFromJSONTyped, MetaDataDefinitionMockMetaDataToJSON, } from './MetaDataDefinitionMockMetaData';
import { MetaDataDefinitionOgrMetaDataFromJSONTyped, MetaDataDefinitionOgrMetaDataToJSON, } from './MetaDataDefinitionOgrMetaData';
export function MetaDataDefinitionFromJSON(json) {
    return MetaDataDefinitionFromJSONTyped(json, false);
}
export function MetaDataDefinitionFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'GdalMetaDataList':
            return Object.assign({}, MetaDataDefinitionGdalMetaDataListFromJSONTyped(json, true), { type: 'GdalMetaDataList' });
        case 'GdalMetaDataRegular':
            return Object.assign({}, MetaDataDefinitionGdalMetaDataRegularFromJSONTyped(json, true), { type: 'GdalMetaDataRegular' });
        case 'GdalMetadataNetCdfCf':
            return Object.assign({}, MetaDataDefinitionGdalMetadataNetCdfCfFromJSONTyped(json, true), { type: 'GdalMetadataNetCdfCf' });
        case 'GdalStatic':
            return Object.assign({}, MetaDataDefinitionGdalStaticFromJSONTyped(json, true), { type: 'GdalStatic' });
        case 'MockMetaData':
            return Object.assign({}, MetaDataDefinitionMockMetaDataFromJSONTyped(json, true), { type: 'MockMetaData' });
        case 'OgrMetaData':
            return Object.assign({}, MetaDataDefinitionOgrMetaDataFromJSONTyped(json, true), { type: 'OgrMetaData' });
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${json['type']}'`);
    }
}
export function MetaDataDefinitionToJSON(value) {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'GdalMetaDataList':
            return MetaDataDefinitionGdalMetaDataListToJSON(value);
        case 'GdalMetaDataRegular':
            return MetaDataDefinitionGdalMetaDataRegularToJSON(value);
        case 'GdalMetadataNetCdfCf':
            return MetaDataDefinitionGdalMetadataNetCdfCfToJSON(value);
        case 'GdalStatic':
            return MetaDataDefinitionGdalStaticToJSON(value);
        case 'MockMetaData':
            return MetaDataDefinitionMockMetaDataToJSON(value);
        case 'OgrMetaData':
            return MetaDataDefinitionOgrMetaDataToJSON(value);
        default:
            throw new Error(`No variant of MetaDataDefinition exists with 'type=${value['type']}'`);
    }
}
