/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { OgrSourceColumnSpecFromJSON, OgrSourceColumnSpecToJSON, } from './OgrSourceColumnSpec';
import { OgrSourceDatasetTimeTypeFromJSON, OgrSourceDatasetTimeTypeToJSON, } from './OgrSourceDatasetTimeType';
import { OgrSourceErrorSpecFromJSON, OgrSourceErrorSpecToJSON, } from './OgrSourceErrorSpec';
import { TypedGeometryFromJSON, TypedGeometryToJSON, } from './TypedGeometry';
import { VectorDataTypeFromJSON, VectorDataTypeToJSON, } from './VectorDataType';
/**
 * Check if a given object implements the OgrSourceDataset interface.
 */
export function instanceOfOgrSourceDataset(value) {
    if (!('fileName' in value))
        return false;
    if (!('layerName' in value))
        return false;
    if (!('onError' in value))
        return false;
    return true;
}
export function OgrSourceDatasetFromJSON(json) {
    return OgrSourceDatasetFromJSONTyped(json, false);
}
export function OgrSourceDatasetFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'attributeQuery': json['attributeQuery'] == null ? undefined : json['attributeQuery'],
        'cacheTtl': json['cacheTtl'] == null ? undefined : json['cacheTtl'],
        'columns': json['columns'] == null ? undefined : OgrSourceColumnSpecFromJSON(json['columns']),
        'dataType': json['dataType'] == null ? undefined : VectorDataTypeFromJSON(json['dataType']),
        'defaultGeometry': json['defaultGeometry'] == null ? undefined : TypedGeometryFromJSON(json['defaultGeometry']),
        'fileName': json['fileName'],
        'forceOgrSpatialFilter': json['forceOgrSpatialFilter'] == null ? undefined : json['forceOgrSpatialFilter'],
        'forceOgrTimeFilter': json['forceOgrTimeFilter'] == null ? undefined : json['forceOgrTimeFilter'],
        'layerName': json['layerName'],
        'onError': OgrSourceErrorSpecFromJSON(json['onError']),
        'sqlQuery': json['sqlQuery'] == null ? undefined : json['sqlQuery'],
        'time': json['time'] == null ? undefined : OgrSourceDatasetTimeTypeFromJSON(json['time']),
    };
}
export function OgrSourceDatasetToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'attributeQuery': value['attributeQuery'],
        'cacheTtl': value['cacheTtl'],
        'columns': OgrSourceColumnSpecToJSON(value['columns']),
        'dataType': VectorDataTypeToJSON(value['dataType']),
        'defaultGeometry': TypedGeometryToJSON(value['defaultGeometry']),
        'fileName': value['fileName'],
        'forceOgrSpatialFilter': value['forceOgrSpatialFilter'],
        'forceOgrTimeFilter': value['forceOgrTimeFilter'],
        'layerName': value['layerName'],
        'onError': OgrSourceErrorSpecToJSON(value['onError']),
        'sqlQuery': value['sqlQuery'],
        'time': OgrSourceDatasetTimeTypeToJSON(value['time']),
    };
}
