/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { GdalLoadingInfoTemporalSliceFromJSON, GdalLoadingInfoTemporalSliceToJSON, } from './GdalLoadingInfoTemporalSlice';
import { RasterResultDescriptorFromJSON, RasterResultDescriptorToJSON, } from './RasterResultDescriptor';
/**
 * @export
 */
export const MetaDataDefinitionGdalMetaDataListTypeEnum = {
    GdalMetaDataList: 'GdalMetaDataList'
};
/**
 * Check if a given object implements the MetaDataDefinitionGdalMetaDataList interface.
 */
export function instanceOfMetaDataDefinitionGdalMetaDataList(value) {
    if (!('params' in value))
        return false;
    if (!('resultDescriptor' in value))
        return false;
    if (!('type' in value))
        return false;
    return true;
}
export function MetaDataDefinitionGdalMetaDataListFromJSON(json) {
    return MetaDataDefinitionGdalMetaDataListFromJSONTyped(json, false);
}
export function MetaDataDefinitionGdalMetaDataListFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'params': (json['params'].map(GdalLoadingInfoTemporalSliceFromJSON)),
        'resultDescriptor': RasterResultDescriptorFromJSON(json['resultDescriptor']),
        'type': json['type'],
    };
}
export function MetaDataDefinitionGdalMetaDataListToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'params': (value['params'].map(GdalLoadingInfoTemporalSliceToJSON)),
        'resultDescriptor': RasterResultDescriptorToJSON(value['resultDescriptor']),
        'type': value['type'],
    };
}
