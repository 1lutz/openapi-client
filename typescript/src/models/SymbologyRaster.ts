/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RasterColorizer } from './RasterColorizer';
import {
    RasterColorizerFromJSON,
    RasterColorizerFromJSONTyped,
    RasterColorizerToJSON,
} from './RasterColorizer';

/**
 * 
 * @export
 * @interface SymbologyRaster
 */
export interface SymbologyRaster {
    /**
     * 
     * @type {number}
     * @memberof SymbologyRaster
     */
    opacity: number;
    /**
     * 
     * @type {RasterColorizer}
     * @memberof SymbologyRaster
     */
    rasterColorizer: RasterColorizer;
    /**
     * 
     * @type {string}
     * @memberof SymbologyRaster
     */
    type: SymbologyRasterTypeEnum;
}


/**
 * @export
 */
export const SymbologyRasterTypeEnum = {
    Raster: 'raster'
} as const;
export type SymbologyRasterTypeEnum = typeof SymbologyRasterTypeEnum[keyof typeof SymbologyRasterTypeEnum];


/**
 * Check if a given object implements the SymbologyRaster interface.
 */
export function instanceOfSymbologyRaster(value: object): boolean {
    if (!('opacity' in value)) return false;
    if (!('rasterColorizer' in value)) return false;
    if (!('type' in value)) return false;
    return true;
}

export function SymbologyRasterFromJSON(json: any): SymbologyRaster {
    return SymbologyRasterFromJSONTyped(json, false);
}

export function SymbologyRasterFromJSONTyped(json: any, ignoreDiscriminator: boolean): SymbologyRaster {
    if (json == null) {
        return json;
    }
    return {
        
        'opacity': json['opacity'],
        'rasterColorizer': RasterColorizerFromJSON(json['rasterColorizer']),
        'type': json['type'],
    };
}

export function SymbologyRasterToJSON(value?: SymbologyRaster | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'opacity': value['opacity'],
        'rasterColorizer': RasterColorizerToJSON(value['rasterColorizer']),
        'type': value['type'],
    };
}

