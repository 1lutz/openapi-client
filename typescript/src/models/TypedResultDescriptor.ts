/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { TypedResultDescriptorPlot } from './TypedResultDescriptorPlot';
import {
    instanceOfTypedResultDescriptorPlot,
    TypedResultDescriptorPlotFromJSON,
    TypedResultDescriptorPlotFromJSONTyped,
    TypedResultDescriptorPlotToJSON,
} from './TypedResultDescriptorPlot';
import type { TypedResultDescriptorRaster } from './TypedResultDescriptorRaster';
import {
    instanceOfTypedResultDescriptorRaster,
    TypedResultDescriptorRasterFromJSON,
    TypedResultDescriptorRasterFromJSONTyped,
    TypedResultDescriptorRasterToJSON,
} from './TypedResultDescriptorRaster';
import type { TypedResultDescriptorVector } from './TypedResultDescriptorVector';
import {
    instanceOfTypedResultDescriptorVector,
    TypedResultDescriptorVectorFromJSON,
    TypedResultDescriptorVectorFromJSONTyped,
    TypedResultDescriptorVectorToJSON,
} from './TypedResultDescriptorVector';

/**
 * @type TypedResultDescriptor
 * 
 * @export
 */
export type TypedResultDescriptor = { type: 'plot' } & TypedResultDescriptorPlot | { type: 'raster' } & TypedResultDescriptorRaster | { type: 'vector' } & TypedResultDescriptorVector;

export function TypedResultDescriptorFromJSON(json: any): TypedResultDescriptor {
    return TypedResultDescriptorFromJSONTyped(json, false);
}

export function TypedResultDescriptorFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypedResultDescriptor {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'plot':
            return Object.assign({}, TypedResultDescriptorPlotFromJSONTyped(json, true), { type: 'plot' });
        case 'raster':
            return Object.assign({}, TypedResultDescriptorRasterFromJSONTyped(json, true), { type: 'raster' });
        case 'vector':
            return Object.assign({}, TypedResultDescriptorVectorFromJSONTyped(json, true), { type: 'vector' });
        default:
            throw new Error(`No variant of TypedResultDescriptor exists with 'type=${json['type']}'`);
    }
}

export function TypedResultDescriptorToJSON(value?: TypedResultDescriptor | null): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'plot':
            return TypedResultDescriptorPlotToJSON(value);
        case 'raster':
            return TypedResultDescriptorRasterToJSON(value);
        case 'vector':
            return TypedResultDescriptorVectorToJSON(value);
        default:
            throw new Error(`No variant of TypedResultDescriptor exists with 'type=${value['type']}'`);
    }

}

