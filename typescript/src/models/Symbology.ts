/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { SymbologyLine } from './SymbologyLine';
import {
    instanceOfSymbologyLine,
    SymbologyLineFromJSON,
    SymbologyLineFromJSONTyped,
    SymbologyLineToJSON,
} from './SymbologyLine';
import type { SymbologyPoint } from './SymbologyPoint';
import {
    instanceOfSymbologyPoint,
    SymbologyPointFromJSON,
    SymbologyPointFromJSONTyped,
    SymbologyPointToJSON,
} from './SymbologyPoint';
import type { SymbologyPolygon } from './SymbologyPolygon';
import {
    instanceOfSymbologyPolygon,
    SymbologyPolygonFromJSON,
    SymbologyPolygonFromJSONTyped,
    SymbologyPolygonToJSON,
} from './SymbologyPolygon';
import type { SymbologyRaster } from './SymbologyRaster';
import {
    instanceOfSymbologyRaster,
    SymbologyRasterFromJSON,
    SymbologyRasterFromJSONTyped,
    SymbologyRasterToJSON,
} from './SymbologyRaster';

/**
 * @type Symbology
 * 
 * @export
 */
export type Symbology = { type: 'line' } & SymbologyLine | { type: 'point' } & SymbologyPoint | { type: 'polygon' } & SymbologyPolygon | { type: 'raster' } & SymbologyRaster;

export function SymbologyFromJSON(json: any): Symbology {
    return SymbologyFromJSONTyped(json, false);
}

export function SymbologyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Symbology {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'line':
            return {...SymbologyLineFromJSONTyped(json, true), type: 'line'};
        case 'point':
            return {...SymbologyPointFromJSONTyped(json, true), type: 'point'};
        case 'polygon':
            return {...SymbologyPolygonFromJSONTyped(json, true), type: 'polygon'};
        case 'raster':
            return {...SymbologyRasterFromJSONTyped(json, true), type: 'raster'};
        default:
            throw new Error(`No variant of Symbology exists with 'type=${json['type']}'`);
    }
}

export function SymbologyToJSON(value?: Symbology | null): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'line':
            return SymbologyLineToJSON(value);
        case 'point':
            return SymbologyPointToJSON(value);
        case 'polygon':
            return SymbologyPolygonToJSON(value);
        case 'raster':
            return SymbologyRasterToJSON(value);
        default:
            throw new Error(`No variant of Symbology exists with 'type=${value['type']}'`);
    }

}

