/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ResourceDataset } from './ResourceDataset';
import {
    instanceOfResourceDataset,
    ResourceDatasetFromJSON,
    ResourceDatasetFromJSONTyped,
    ResourceDatasetToJSON,
} from './ResourceDataset';
import type { ResourceLayer } from './ResourceLayer';
import {
    instanceOfResourceLayer,
    ResourceLayerFromJSON,
    ResourceLayerFromJSONTyped,
    ResourceLayerToJSON,
} from './ResourceLayer';
import type { ResourceLayerCollection } from './ResourceLayerCollection';
import {
    instanceOfResourceLayerCollection,
    ResourceLayerCollectionFromJSON,
    ResourceLayerCollectionFromJSONTyped,
    ResourceLayerCollectionToJSON,
} from './ResourceLayerCollection';
import type { ResourceProject } from './ResourceProject';
import {
    instanceOfResourceProject,
    ResourceProjectFromJSON,
    ResourceProjectFromJSONTyped,
    ResourceProjectToJSON,
} from './ResourceProject';

/**
 * @type Resource
 * 
 * @export
 */
export type Resource = { type: 'dataset' } & ResourceDataset | { type: 'layer' } & ResourceLayer | { type: 'layerCollection' } & ResourceLayerCollection | { type: 'project' } & ResourceProject;

export function ResourceFromJSON(json: any): Resource {
    return ResourceFromJSONTyped(json, false);
}

export function ResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Resource {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'dataset':
            return {...ResourceDatasetFromJSONTyped(json, true), type: 'dataset'};
        case 'layer':
            return {...ResourceLayerFromJSONTyped(json, true), type: 'layer'};
        case 'layerCollection':
            return {...ResourceLayerCollectionFromJSONTyped(json, true), type: 'layerCollection'};
        case 'project':
            return {...ResourceProjectFromJSONTyped(json, true), type: 'project'};
        default:
            throw new Error(`No variant of Resource exists with 'type=${json['type']}'`);
    }
}

export function ResourceToJSON(value?: Resource | null): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'dataset':
            return ResourceDatasetToJSON(value);
        case 'layer':
            return ResourceLayerToJSON(value);
        case 'layerCollection':
            return ResourceLayerCollectionToJSON(value);
        case 'project':
            return ResourceProjectToJSON(value);
        default:
            throw new Error(`No variant of Resource exists with 'type=${value['type']}'`);
    }

}

