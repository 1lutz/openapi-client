/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { MeasurementClassification } from './MeasurementClassification';
import {
    instanceOfMeasurementClassification,
    MeasurementClassificationFromJSON,
    MeasurementClassificationFromJSONTyped,
    MeasurementClassificationToJSON,
} from './MeasurementClassification';
import type { MeasurementContinuous } from './MeasurementContinuous';
import {
    instanceOfMeasurementContinuous,
    MeasurementContinuousFromJSON,
    MeasurementContinuousFromJSONTyped,
    MeasurementContinuousToJSON,
} from './MeasurementContinuous';
import type { MeasurementUnitless } from './MeasurementUnitless';
import {
    instanceOfMeasurementUnitless,
    MeasurementUnitlessFromJSON,
    MeasurementUnitlessFromJSONTyped,
    MeasurementUnitlessToJSON,
} from './MeasurementUnitless';

/**
 * @type Measurement
 * 
 * @export
 */
export type Measurement = { type: 'classification' } & MeasurementClassification | { type: 'continuous' } & MeasurementContinuous | { type: 'unitless' } & MeasurementUnitless;

export function MeasurementFromJSON(json: any): Measurement {
    return MeasurementFromJSONTyped(json, false);
}

export function MeasurementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Measurement {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'classification':
            return Object.assign({}, MeasurementClassificationFromJSONTyped(json, true), { type: 'classification' });
        case 'continuous':
            return Object.assign({}, MeasurementContinuousFromJSONTyped(json, true), { type: 'continuous' });
        case 'unitless':
            return Object.assign({}, MeasurementUnitlessFromJSONTyped(json, true), { type: 'unitless' });
        default:
            throw new Error(`No variant of Measurement exists with 'type=${json['type']}'`);
    }
}

export function MeasurementToJSON(value?: Measurement | null): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'classification':
            return MeasurementClassificationToJSON(value);
        case 'continuous':
            return MeasurementContinuousToJSON(value);
        case 'unitless':
            return MeasurementUnitlessToJSON(value);
        default:
            throw new Error(`No variant of Measurement exists with 'type=${value['type']}'`);
    }

}

