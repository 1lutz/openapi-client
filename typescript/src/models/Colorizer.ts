/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ColorizerPalette,
    instanceOfColorizerPalette,
    ColorizerPaletteFromJSON,
    ColorizerPaletteFromJSONTyped,
    ColorizerPaletteToJSON,
} from './ColorizerPalette';
import {
    ColorizerRgba,
    instanceOfColorizerRgba,
    ColorizerRgbaFromJSON,
    ColorizerRgbaFromJSONTyped,
    ColorizerRgbaToJSON,
} from './ColorizerRgba';
import {
    LinearGradient,
    instanceOfLinearGradient,
    LinearGradientFromJSON,
    LinearGradientFromJSONTyped,
    LinearGradientToJSON,
} from './LinearGradient';
import {
    LogarithmicGradient,
    instanceOfLogarithmicGradient,
    LogarithmicGradientFromJSON,
    LogarithmicGradientFromJSONTyped,
    LogarithmicGradientToJSON,
} from './LogarithmicGradient';

/**
 * @type Colorizer
 * 
 * @export
 */
export type Colorizer = { type: 'linearGradient' } & LinearGradient | { type: 'logarithmicGradient' } & LogarithmicGradient | { type: 'palette' } & ColorizerPalette | { type: 'rgba' } & ColorizerRgba;

export function ColorizerFromJSON(json: any): Colorizer {
    return ColorizerFromJSONTyped(json, false);
}

export function ColorizerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Colorizer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'linearGradient':
            return {...LinearGradientFromJSONTyped(json, true), type: 'linearGradient'};
        case 'logarithmicGradient':
            return {...LogarithmicGradientFromJSONTyped(json, true), type: 'logarithmicGradient'};
        case 'palette':
            return {...ColorizerPaletteFromJSONTyped(json, true), type: 'palette'};
        case 'rgba':
            return {...ColorizerRgbaFromJSONTyped(json, true), type: 'rgba'};
        default:
            throw new Error(`No variant of Colorizer exists with 'type=${json['type']}'`);
    }
}

export function ColorizerToJSON(value?: Colorizer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'linearGradient':
            return LinearGradientToJSON(value);
        case 'logarithmicGradient':
            return LogarithmicGradientToJSON(value);
        case 'palette':
            return ColorizerPaletteToJSON(value);
        case 'rgba':
            return ColorizerRgbaToJSON(value);
        default:
            throw new Error(`No variant of Colorizer exists with 'type=${value['type']}'`);
    }

}

