# coding: utf-8

"""
    Geo Engine Pro API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.8.0
    Contact: dev@geoengine.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from geoengine_openapi_client.models.meta_data_definition_gdal_meta_data_list import MetaDataDefinitionGdalMetaDataList
from geoengine_openapi_client.models.meta_data_definition_gdal_meta_data_regular import MetaDataDefinitionGdalMetaDataRegular
from geoengine_openapi_client.models.meta_data_definition_gdal_metadata_net_cdf_cf import MetaDataDefinitionGdalMetadataNetCdfCf
from geoengine_openapi_client.models.meta_data_definition_gdal_static import MetaDataDefinitionGdalStatic
from geoengine_openapi_client.models.meta_data_definition_mock_meta_data import MetaDataDefinitionMockMetaData
from geoengine_openapi_client.models.meta_data_definition_ogr_meta_data import MetaDataDefinitionOgrMetaData
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

METADATADEFINITION_ONE_OF_SCHEMAS = ["MetaDataDefinitionGdalMetaDataList", "MetaDataDefinitionGdalMetaDataRegular", "MetaDataDefinitionGdalMetadataNetCdfCf", "MetaDataDefinitionGdalStatic", "MetaDataDefinitionMockMetaData", "MetaDataDefinitionOgrMetaData"]

class MetaDataDefinition(BaseModel):
    """
    MetaDataDefinition
    """
    # data type: MetaDataDefinitionMockMetaData
    oneof_schema_1_validator: Optional[MetaDataDefinitionMockMetaData] = None
    # data type: MetaDataDefinitionOgrMetaData
    oneof_schema_2_validator: Optional[MetaDataDefinitionOgrMetaData] = None
    # data type: MetaDataDefinitionGdalMetaDataRegular
    oneof_schema_3_validator: Optional[MetaDataDefinitionGdalMetaDataRegular] = None
    # data type: MetaDataDefinitionGdalStatic
    oneof_schema_4_validator: Optional[MetaDataDefinitionGdalStatic] = None
    # data type: MetaDataDefinitionGdalMetadataNetCdfCf
    oneof_schema_5_validator: Optional[MetaDataDefinitionGdalMetadataNetCdfCf] = None
    # data type: MetaDataDefinitionGdalMetaDataList
    oneof_schema_6_validator: Optional[MetaDataDefinitionGdalMetaDataList] = None
    actual_instance: Optional[Union[MetaDataDefinitionGdalMetaDataList, MetaDataDefinitionGdalMetaDataRegular, MetaDataDefinitionGdalMetadataNetCdfCf, MetaDataDefinitionGdalStatic, MetaDataDefinitionMockMetaData, MetaDataDefinitionOgrMetaData]] = None
    one_of_schemas: Set[str] = { "MetaDataDefinitionGdalMetaDataList", "MetaDataDefinitionGdalMetaDataRegular", "MetaDataDefinitionGdalMetadataNetCdfCf", "MetaDataDefinitionGdalStatic", "MetaDataDefinitionMockMetaData", "MetaDataDefinitionOgrMetaData" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = MetaDataDefinition.model_construct()
        error_messages = []
        match = 0
        # validate data type: MetaDataDefinitionMockMetaData
        if not isinstance(v, MetaDataDefinitionMockMetaData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetaDataDefinitionMockMetaData`")
        else:
            match += 1
        # validate data type: MetaDataDefinitionOgrMetaData
        if not isinstance(v, MetaDataDefinitionOgrMetaData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetaDataDefinitionOgrMetaData`")
        else:
            match += 1
        # validate data type: MetaDataDefinitionGdalMetaDataRegular
        if not isinstance(v, MetaDataDefinitionGdalMetaDataRegular):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetaDataDefinitionGdalMetaDataRegular`")
        else:
            match += 1
        # validate data type: MetaDataDefinitionGdalStatic
        if not isinstance(v, MetaDataDefinitionGdalStatic):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetaDataDefinitionGdalStatic`")
        else:
            match += 1
        # validate data type: MetaDataDefinitionGdalMetadataNetCdfCf
        if not isinstance(v, MetaDataDefinitionGdalMetadataNetCdfCf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetaDataDefinitionGdalMetadataNetCdfCf`")
        else:
            match += 1
        # validate data type: MetaDataDefinitionGdalMetaDataList
        if not isinstance(v, MetaDataDefinitionGdalMetaDataList):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetaDataDefinitionGdalMetaDataList`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in MetaDataDefinition with oneOf schemas: MetaDataDefinitionGdalMetaDataList, MetaDataDefinitionGdalMetaDataRegular, MetaDataDefinitionGdalMetadataNetCdfCf, MetaDataDefinitionGdalStatic, MetaDataDefinitionMockMetaData, MetaDataDefinitionOgrMetaData. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in MetaDataDefinition with oneOf schemas: MetaDataDefinitionGdalMetaDataList, MetaDataDefinitionGdalMetaDataRegular, MetaDataDefinitionGdalMetadataNetCdfCf, MetaDataDefinitionGdalStatic, MetaDataDefinitionMockMetaData, MetaDataDefinitionOgrMetaData. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `type` in the input.")

        # check if data type is `MetaDataDefinitionGdalMetaDataList`
        if _data_type == "GdalMetaDataList":
            instance.actual_instance = MetaDataDefinitionGdalMetaDataList.from_json(json_str)
            return instance

        # check if data type is `MetaDataDefinitionGdalMetaDataRegular`
        if _data_type == "GdalMetaDataRegular":
            instance.actual_instance = MetaDataDefinitionGdalMetaDataRegular.from_json(json_str)
            return instance

        # check if data type is `MetaDataDefinitionGdalMetadataNetCdfCf`
        if _data_type == "GdalMetadataNetCdfCf":
            instance.actual_instance = MetaDataDefinitionGdalMetadataNetCdfCf.from_json(json_str)
            return instance

        # check if data type is `MetaDataDefinitionGdalStatic`
        if _data_type == "GdalStatic":
            instance.actual_instance = MetaDataDefinitionGdalStatic.from_json(json_str)
            return instance

        # check if data type is `MetaDataDefinitionMockMetaData`
        if _data_type == "MockMetaData":
            instance.actual_instance = MetaDataDefinitionMockMetaData.from_json(json_str)
            return instance

        # check if data type is `MetaDataDefinitionOgrMetaData`
        if _data_type == "OgrMetaData":
            instance.actual_instance = MetaDataDefinitionOgrMetaData.from_json(json_str)
            return instance

        # check if data type is `MetaDataDefinitionGdalMetaDataList`
        if _data_type == "MetaDataDefinitionGdalMetaDataList":
            instance.actual_instance = MetaDataDefinitionGdalMetaDataList.from_json(json_str)
            return instance

        # check if data type is `MetaDataDefinitionGdalMetaDataRegular`
        if _data_type == "MetaDataDefinitionGdalMetaDataRegular":
            instance.actual_instance = MetaDataDefinitionGdalMetaDataRegular.from_json(json_str)
            return instance

        # check if data type is `MetaDataDefinitionGdalMetadataNetCdfCf`
        if _data_type == "MetaDataDefinitionGdalMetadataNetCdfCf":
            instance.actual_instance = MetaDataDefinitionGdalMetadataNetCdfCf.from_json(json_str)
            return instance

        # check if data type is `MetaDataDefinitionGdalStatic`
        if _data_type == "MetaDataDefinitionGdalStatic":
            instance.actual_instance = MetaDataDefinitionGdalStatic.from_json(json_str)
            return instance

        # check if data type is `MetaDataDefinitionMockMetaData`
        if _data_type == "MetaDataDefinitionMockMetaData":
            instance.actual_instance = MetaDataDefinitionMockMetaData.from_json(json_str)
            return instance

        # check if data type is `MetaDataDefinitionOgrMetaData`
        if _data_type == "MetaDataDefinitionOgrMetaData":
            instance.actual_instance = MetaDataDefinitionOgrMetaData.from_json(json_str)
            return instance

        # deserialize data into MetaDataDefinitionMockMetaData
        try:
            instance.actual_instance = MetaDataDefinitionMockMetaData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetaDataDefinitionOgrMetaData
        try:
            instance.actual_instance = MetaDataDefinitionOgrMetaData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetaDataDefinitionGdalMetaDataRegular
        try:
            instance.actual_instance = MetaDataDefinitionGdalMetaDataRegular.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetaDataDefinitionGdalStatic
        try:
            instance.actual_instance = MetaDataDefinitionGdalStatic.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetaDataDefinitionGdalMetadataNetCdfCf
        try:
            instance.actual_instance = MetaDataDefinitionGdalMetadataNetCdfCf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetaDataDefinitionGdalMetaDataList
        try:
            instance.actual_instance = MetaDataDefinitionGdalMetaDataList.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into MetaDataDefinition with oneOf schemas: MetaDataDefinitionGdalMetaDataList, MetaDataDefinitionGdalMetaDataRegular, MetaDataDefinitionGdalMetadataNetCdfCf, MetaDataDefinitionGdalStatic, MetaDataDefinitionMockMetaData, MetaDataDefinitionOgrMetaData. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into MetaDataDefinition with oneOf schemas: MetaDataDefinitionGdalMetaDataList, MetaDataDefinitionGdalMetaDataRegular, MetaDataDefinitionGdalMetadataNetCdfCf, MetaDataDefinitionGdalStatic, MetaDataDefinitionMockMetaData, MetaDataDefinitionOgrMetaData. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], MetaDataDefinitionGdalMetaDataList, MetaDataDefinitionGdalMetaDataRegular, MetaDataDefinitionGdalMetadataNetCdfCf, MetaDataDefinitionGdalStatic, MetaDataDefinitionMockMetaData, MetaDataDefinitionOgrMetaData]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


